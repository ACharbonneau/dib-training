Pydoit for Workflow Automation
==============================

Who: Camille Scott, lead instructor.

When: January 20, 2016

Times: 9:15am-12:15pm PST

Where: TBD (Valley Hall, UC Davis Campus)  

Contact: Please contact `Jessica Mizzi <mailto:jessica.mizzi@gmail.com>`__ with any questions.


`> Register Here < <https://www.eventbrite.com/e/pydoit-half-day-workshop-tickets-20039930973>`__
------------------------------------------------------------------------------------------------------------------

.. `> Materials Link Here < <http://emilydolson.github.io/D3-visualising-data/>`__
.. -------------------------------------------------------------------------------


Description
-----------

Pydoit is a task management and automation tool, similar to ‘make’ (comparison: http://swcarpentry.github.io/bc/intermediate/doit/make-vs-doit.html). Tasks are defined individually and executed in order according to dependencies, via a directed acyclic graph. The basic building blocks of a pydoit workflow are tasks, which encode the work we would like to get done. Here is an extremely simple task::

 def task_hello_world():
    return {'actions': ['echo "hello world!" > hello.txt’ ],
                'targets': ['hello.txt’]}


The task is a python function prefixed with task, which returns a dictionary containing some predefined entries. The actions entry is a list of the actual commands we'd like to run, in this case, a single shell command. The targets entry is a list of the files output by this task.  Of course, hello world doesn't really do anything for us. Throughout this lesson, we're going to build a pipeline which downloads some data, plots it with matplotlib, generates a markup file with the chart, and outputs a final compiled document -- in other words, a barebones version of a publication pipeline.

Installation instructions
-------------------------

**The Bash Shell**

Windows:

1. Download the Git for Windows installer `here <https://git-for-windows.github.io/>`__.
2. Follow install instructions.

   * Click "next"
   * Click "next"
   * Click "next"
   * Click "next"
   * Click "next"
   * Select **"Use Git from the Windows Command Prompt"** and click on "next".  If you forget to do this, re-run the installer and select the correct option.
   * Click "next", keep **"Checkout Windows-style, commit Unix-style line endings"** selected.
   * Select **"Use Windows' default console window"** and click on "next"
   * Click on "next"
   * Click on "finish"

Mac OS X:

The default shell in Mac OS X is bash, so you can access the Terminal from /Applications/Utilities 
(go to your Applications folder, then go to the Utilities window.  You should see "Terminal" there)
